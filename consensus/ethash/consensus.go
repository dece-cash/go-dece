// Copyright 2017 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package ethash

import (
	"bytes"
	"errors"
	"fmt"
	"github.com/dece-cash/go-dece/crypto"

	// "github.com/dece-cash/go-dece/zero/stake"
	"math/big"
	"runtime"
	"time"

	"github.com/dece-cash/go-dece/zero/zconfig"

	"github.com/dece-cash/go-dece/czero/deceparam"

	"github.com/dece-cash/go-dece/zero/txs/assets"
	"github.com/dece-cash/go-dece/zero/utils"

	"github.com/dece-cash/go-dece/common"
	"github.com/dece-cash/go-dece/common/math"
	"github.com/dece-cash/go-dece/consensus"
	"github.com/dece-cash/go-dece/core/state"
	"github.com/dece-cash/go-dece/core/types"
	"github.com/dece-cash/go-dece/params"
)

// Ethash proof-of-work protocol constants.
var (
	allowedFutureBlockTime          = 15 * time.Second // Max time from current time allowed for blocks, before they're considered future blocks
	bigOne                 *big.Int = big.NewInt(1)
	big200W                *big.Int = big.NewInt(2000000)
)

// Various error messages to mark blocks invalid. These should be private to
// prevent engine specific errors from being referenced in the remainder of the
// codebase, inherently breaking if the engine is swapped out. Please put common
// error types into the consensus package.
var (
	errZeroBlockTime     = errors.New("timestamp equals parent's")
	errInvalidDifficulty = errors.New("non-positive difficulty")
	errInvalidMixDigest  = errors.New("invalid mix digest")
	errInvalidPoW        = errors.New("invalid proof-of-work")
)

// Author implements consensus.Engine, returning the header's coinbase as the
// proof-of-work verified author of the block.
func (ethash *Ethash) Author(header *types.Header) (common.Address, error) {
	return header.Coinbase, nil
}

// VerifyHeader checks whether a header conforms to the consensus rules of the
// stock Ethereum ethash engine.
func (ethash *Ethash) VerifyHeader(chain consensus.ChainReader, header *types.Header, seal bool) error {
	// If we're running a full engine faking, accept any input as valid
	if ethash.config.PowMode == ModeFullFake {
		return nil
	}
	// Short circuit if the header is known, or it's parent not
	number := header.Number.Uint64()
	if chain.GetHeader(header.Hash(), number) != nil {
		return nil
	}
	parent := chain.GetHeader(header.ParentHash, number-1)
	if parent == nil {
		return consensus.ErrUnknownAncestor
	}
	// Sanity checks passed, do a proper verification
	return ethash.verifyHeader(chain, header, parent, seal)
}

// VerifyHeaders is similar to VerifyHeader, but verifies a batch of headers
// concurrently. The method returns a quit channel to abort the operations and
// a results channel to retrieve the async verifications.
func (ethash *Ethash) VerifyHeaders(chain consensus.ChainReader, headers []*types.Header, seals []bool) (chan<- struct{}, <-chan error) {
	// If we're running a full engine faking, accept any input as valid
	if ethash.config.PowMode == ModeFullFake || len(headers) == 0 {
		abort, results := make(chan struct{}), make(chan error, len(headers))
		for i := 0; i < len(headers); i++ {
			results <- nil
		}
		return abort, results
	}

	// Spawn as many workers as allowed threads
	workers := runtime.GOMAXPROCS(0)
	if len(headers) < workers {
		workers = len(headers)
	}

	// Create a task channel and spawn the verifiers
	var (
		inputs = make(chan int)
		done   = make(chan int, workers)
		errors = make([]error, len(headers))
		abort  = make(chan struct{})
	)
	for i := 0; i < workers; i++ {
		go func() {
			for index := range inputs {
				errors[index] = ethash.verifyHeaderWorker(chain, headers, seals, index)
				done <- index
			}
		}()
	}

	errorsOut := make(chan error, len(headers))
	go func() {
		defer close(inputs)
		var (
			in, out = 0, 0
			checked = make([]bool, len(headers))
			inputs  = inputs
		)
		for {
			select {
			case inputs <- in:
				if in++; in == len(headers) {
					// Reached end of headers. Stop sending to workers.
					inputs = nil
				}
			case index := <-done:
				for checked[index] = true; checked[out]; out++ {
					errorsOut <- errors[out]
					if out == len(headers)-1 {
						return
					}
				}
			case <-abort:
				return
			}
		}
	}()
	return abort, errorsOut
}

func (ethash *Ethash) verifyHeaderWorker(chain consensus.ChainReader, headers []*types.Header, seals []bool, index int) error {
	var parent *types.Header
	if index == 0 {
		parent = chain.GetHeader(headers[0].ParentHash, headers[0].Number.Uint64()-1)
	} else if headers[index-1].Hash() == headers[index].ParentHash {
		parent = headers[index-1]
	}
	if parent == nil {
		return consensus.ErrUnknownAncestor
	}
	if chain.GetHeader(headers[index].Hash(), headers[index].Number.Uint64()) != nil {
		return nil // known block
	}
	return ethash.verifyHeader(chain, headers[index], parent, seals[index])
}

// verifyHeader checks whether a header conforms to the consensus rules of the
// stock Ethereum ethash engine.
// See YP section 4.3.4. "Block Header Validity"
func (ethash *Ethash) verifyHeader(chain consensus.ChainReader, header, parent *types.Header, seal bool) error {

	// Ensure that the header's extra-data section is of a reasonable size
	if uint64(len(header.Extra)) > params.MaximumExtraDataSize {
		return fmt.Errorf("extra-data too long: %d > %d", len(header.Extra), params.MaximumExtraDataSize)
	}
	// Verify the header's timestamp
	if header.Time.Cmp(big.NewInt(time.Now().Add(allowedFutureBlockTime).Unix())) > 0 {
		return consensus.ErrFutureBlock
	}

	if header.Time.Cmp(parent.Time) <= 0 {
		return errZeroBlockTime
	}
	// Verify the block's difficulty based in it's timestamp and parent's difficulty
	expected := ethash.CalcDifficulty(chain, header.Time.Uint64(), parent)

	if expected.Cmp(header.Difficulty) != 0 {
		return fmt.Errorf("invalid difficulty: have %v, want %v", header.Difficulty, expected)
	}
	// Verify that the gas limit is <= 2^63-1
	cap := uint64(0x7fffffffffffffff)
	if header.GasLimit > cap {
		return fmt.Errorf("invalid gasLimit: have %v, max %v", header.GasLimit, cap)
	}
	// Verify that the gasUsed is <= gasLimit
	if header.GasUsed > header.GasLimit {
		return fmt.Errorf("invalid gasUsed: have %d, gasLimit %d", header.GasUsed, header.GasLimit)
	}

	// Verify that the gas limit remains within allowed bounds
	diff := int64(parent.GasLimit) - int64(header.GasLimit)
	divisor := uint64(1024)
	if diff < 0 {
		diff *= -1
		divisor = uint64(128)
	}
	limit := parent.GasLimit / divisor

	if uint64(diff) >= limit || header.GasLimit < params.MinGasLimit {
		return fmt.Errorf("invalid gas limit: have %d, want %d += %d", header.GasLimit, parent.GasLimit, limit)
	}
	// Verify that the block number is parent's +1
	if diff := new(big.Int).Sub(header.Number, parent.Number); diff.Cmp(big.NewInt(1)) != 0 {
		return consensus.ErrInvalidNumber
	}
	// Verify the engine specific seal securing the block
	if seal {
		if err := ethash.VerifySeal(chain, header); err != nil {
			return err
		}
	}
	return nil
}

// CalcDifficulty is the difficulty adjustment algorithm. It returns
// the difficulty that a new block should have when created at time
// given the parent block's time and difficulty.
func (ethash *Ethash) CalcDifficulty(chain consensus.ChainReader, time uint64, parent *types.Header) *big.Int {
	return CalcDifficulty(chain.Config(), time, parent)
}

// CalcDifficulty is the difficulty adjustment algorithm. It returns
// the difficulty that a new block should have when created at time
// given the parent block's time and difficulty.
func CalcDifficulty(config *params.ChainConfig, time uint64, parent *types.Header) *big.Int {
	if zconfig.IsTestFork() {
		if parent.Number.Uint64() >= zconfig.GetTestForkStartBlock() {
			return big.NewInt(10000)
		}
	}

	if deceparam.Is_Dev() {
		return big.NewInt(10000)
	}

	return calcDifficultyAutumnTwilight(time, parent)
}

// Some weird constants to avoid constant memory allocs for them.
var (
	expDiffPeriod = big.NewInt(100000)
	big1          = big.NewInt(1)
	big2          = big.NewInt(2)
	big6          = big.NewInt(6)
	big9          = big.NewInt(9)
	bigMinus99    = big.NewInt(-99)
)

// calcDifficultyAutumnTwilight is the difficulty adjustment algorithm. It returns
// the difficulty that a new block should have when created at time given the
// parent block's time and difficulty. The calculation uses the AutumnTwilight rules.
func calcDifficultyAutumnTwilight(time uint64, parent *types.Header) *big.Int {
	// https://github.com/ethereum/EIPs/issues/100.
	// algorithm:
	// diff = (parent_diff +
	//         (parent_diff / 2048 * max((1 - ((timestamp - parent.timestamp) // 9), -99))
	//        )
	bigTime := new(big.Int).SetUint64(time)
	bigParentTime := new(big.Int).Set(parent.Time)

	// holds intermediate values to make the algo easier to read & audit
	x := new(big.Int)
	y := new(big.Int)

	// 1 - (block_timestamp - parent_timestamp) // 9
	x.Sub(bigTime, bigParentTime)
	x.Div(x, big9)
	x.Sub(big1, x)
	// max(1 - (block_timestamp - parent_timestamp) // 9, -99)
	if x.Cmp(bigMinus99) < 0 {
		x.Set(bigMinus99)
	}
	// parent_diff + (parent_diff / 2048 * max(1 - ((timestamp - parent.timestamp) // 9), -99))
	y.Div(parent.Difficulty, params.DifficultyBoundDivisor)
	x.Mul(y, x)
	x.Add(parent.Difficulty, x)

	// minimum difficulty can ever be (before exponential factor)
	if x.Cmp(params.MinimumDifficulty) < 0 {
		x.Set(params.MinimumDifficulty)
	}
	return x
}

// calcDifficultyFrontier is the difficulty adjustment algorithm. It returns the
// difficulty that a new block should have when created at time given the parent
// block's time and difficulty. The calculation uses the Frontier rules.
func calcDifficultyFrontier(time uint64, parent *types.Header) *big.Int {
	diff := new(big.Int)
	adjust := new(big.Int).Div(parent.Difficulty, params.DifficultyBoundDivisor)
	bigTime := new(big.Int)
	bigParentTime := new(big.Int)

	bigTime.SetUint64(time)
	bigParentTime.Set(parent.Time)

	if bigTime.Sub(bigTime, bigParentTime).Cmp(params.DurationLimit) < 0 {
		diff.Add(parent.Difficulty, adjust)
	} else {
		diff.Sub(parent.Difficulty, adjust)
	}
	if diff.Cmp(params.MinimumDifficulty) < 0 {
		diff.Set(params.MinimumDifficulty)
	}

	periodCount := new(big.Int).Add(parent.Number, big1)
	periodCount.Div(periodCount, expDiffPeriod)
	if periodCount.Cmp(big1) > 0 {
		// diff = diff + 2^(periodCount - 2)
		expDiff := periodCount.Sub(periodCount, big2)
		expDiff.Exp(big2, expDiff, nil)
		diff.Add(diff, expDiff)
		diff = math.BigMax(diff, params.MinimumDifficulty)
	}
	return diff
}

// VerifySeal implements consensus.Engine, checking whether the given block satisfies
// the PoW difficulty requirements.
func (ethash *Ethash) VerifySeal(chain consensus.ChainReader, header *types.Header) error {
	// If we're running a fake PoW, accept any seal as valid
	if ethash.config.PowMode == ModeFake || ethash.config.PowMode == ModeFullFake {
		time.Sleep(ethash.fakeDelay)
		if ethash.fakeFail == header.Number.Uint64() {
			return errInvalidPoW
		}
		return nil
	}
	// If we're running a shared PoW, delegate verification to it
	if ethash.shared != nil {
		return ethash.shared.VerifySeal(chain, header)
	}
	// Ensure that we have a valid difficulty for the block
	if header.Difficulty.Sign() <= 0 {
		return errInvalidDifficulty
	}
	// Recompute the digest and PoW value and verify against the header
	number := header.Number.Uint64()

	cache := ethash.cache(number)
	size := datasetSize(number)
	if ethash.config.PowMode == ModeTest {
		size = 32 * 1024
	}

	var digest []byte
	var result []byte
	//digest, result = progpowLightWithoutCDag(size, cache.cache, cache.cdag, header.HashPow().Bytes(), header.Nonce.Uint64(), number)
	digest, result = hashimotoLight(size, cache.cache, header.HashPow().Bytes(), header.Nonce.Uint64(), number)
	// Caches are unmapped in a finalizer. Ensure that the cache stays live
	// until after the call to hashimotoLight so it's not unmapped while being used.
	runtime.KeepAlive(cache)

	if !bytes.Equal(header.MixDigest[:], digest) {
		return errInvalidMixDigest
	}
	target := new(big.Int).Div(maxUint256, header.ActualDifficulty())
	if new(big.Int).SetBytes(result).Cmp(target) > 0 {
		return errInvalidPoW
	}
	return nil
}

// Prepare implements consensus.Engine, initializing the difficulty field of a
// header to conform to the ethash protocol. The changes are done inline.
func (ethash *Ethash) Prepare(chain consensus.ChainReader, header *types.Header) error {
	parent := chain.GetHeader(header.ParentHash, header.Number.Uint64()-1)
	if parent == nil {
		return consensus.ErrUnknownAncestor
	}
	header.Difficulty = ethash.CalcDifficulty(chain, header.Time.Uint64(), parent)
	return nil
}

var code0 = common.Hex2Bytes("6080604052600436106101145760003560e01c806381274d3a116100a0578063dbdd0aab11610064578063dbdd0aab14610307578063e4e3b32b14610327578063f2c298be14610347578063f2fde38b1461035a578063f71d96cb1461037a57610114565b806381274d3a146102555780638da5cb5b14610282578063b84055d6146102a4578063b9e0db35146102c4578063be9a6555146102f257610114565b806349145c91116100e757806349145c91146101b357806351d31822146101e0578063565974d3146102005780635685822314610222578063655e86ba1461023557610114565b80631d994f92146101195780633723bbe61461014f5780633a5294a01461016f5780633ccfd60b1461019c575b600080fd5b34801561012557600080fd5b50610139610134366004612c8c565b6103b3565b6040516101469190612f20565b60405180910390f35b34801561015b57600080fd5b5061013961016a366004612ca7565b6103c5565b34801561017b57600080fd5b5061018f61018a366004612d66565b610418565b6040516101469190612e6e565b3480156101a857600080fd5b506101b161059e565b005b3480156101bf57600080fd5b506101d36101ce366004612cbf565b610645565b6040516101469190612fe5565b3480156101ec57600080fd5b506101b16101fb366004612c8c565b6106db565b34801561020c57600080fd5b50610215610714565b6040516101469190612e81565b6101b1610230366004612cf9565b61098e565b34801561024157600080fd5b50610139610250366004612ca7565b610a34565b34801561026157600080fd5b50610275610270366004612ca7565b610a46565b6040516101469190612ff9565b34801561028e57600080fd5b50610297610a5b565b6040516101469190612e5a565b3480156102b057600080fd5b506101396102bf366004612d45565b610a6a565b3480156102d057600080fd5b506102e46102df366004612ca7565b610ab1565b604051610146929190612f44565b3480156102fe57600080fd5b506101b1610adc565b34801561031357600080fd5b50610139610322366004612ca7565b610b08565b34801561033357600080fd5b506102e4610342366004612ca7565b610b73565b6101b1610355366004612cbf565b610bf6565b34801561036657600080fd5b506101b1610375366004612c8c565b610c85565b34801561038657600080fd5b5061039a610395366004612ca7565b610d0b565b6040516101469d9c9b9a99989796959493929190612f71565b600b6020526000908152604090205481565b6000610410600a83815481106103d757fe5b906000526020600020906002020160000154600118600a84815481106103f957fe5b906000526020600020906002020160010154610a6a565b90505b919050565b606061042382610d7e565b6040805160208082528183019092529193506060919060208201818036833701905050905060005b6001600160401b038416156104ff57600080546001600160401b039081169086168161047357fe5b60008054929091049250906001600160401b039081169087168161049357fe5b0690506001816001600160401b0316815481106104ac57fe5b90600052602060002090602091828204019190069054906101000a900460f81b8484806001019550815181106104de57fe5b60200101906001600160f81b031916908160001a905350819550505061044b565b6060816001600160401b038111801561051757600080fd5b506040519080825280601f01601f191660200182016040528015610542576020820181803683370190505b509050815b80156105955783600182038151811061055c57fe5b602001015160f81c60f81b828285038151811061057557fe5b60200101906001600160f81b031916908160001a90535060001901610547565b50949350505050565b336000908152600b60205260408120546009805490919081106105bd57fe5b90600052602060002090600d0201600301549050600081116105de57600080fd5b336000908152600b60205260408120546009805490919081106105fd57fe5b90600052602060002090600d0201600301819055506106393360405180604001604052806004815260200163444b525760e01b81525083610dd2565b61064257600080fd5b50565b8051600090829082805b826001600160401b03168110156106c85780600184036001600160401b0316036001600160401b03166000809054906101000a90046001600160401b03166001600160401b03160a6106ba8583815181106106a657fe5b01602001516001600160f81b031916610dfd565b02919091019060010161064f565b506106d281610e67565b95945050505050565b6007546001600160a01b031633146106f257600080fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b61071c612b45565b336000908152600b602052604090205480610737575061098b565b808252600a805460009161078b918490811061074f57fe5b906000526020600020906002020160000154600202600a848154811061077157fe5b906000526020600020906002020160010154600101610a6a565b905060006107c4600a848154811061079f57fe5b906000526020600020906002020160000154600202600101600a858154811061077157fe5b905081156107f357600982815481106107d957fe5b600091825260209091206009600d90920201015460608501525b8015610820576009818154811061080657fe5b600091825260209091206009600d90920201015460808501525b811580159061082e57508015155b801561084b57506000838152600d602052604090205460ff166003145b1561088457600084608001518560600151101561086d57506060840151610874565b5060808401515b61087d81610ee8565b60a0860152505b61089083600202610418565b60208501526108a460016002850201610418565b604085015260098054849081106108b757fe5b90600052602060002090600d0201604051806101a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c820154815250508460c001819052506109826009848154811061096b57fe5b90600052602060002090600d020160000154610418565b60e08501525050505b90565b6109bb60405180604001604052806004815260200163444b525760e01b8152506109b6610f77565b610fb7565b6109c457600080fd5b600e54604080518082019091526004815263444b525760e01b60208201523491610a1b916001600160a01b0390911690610a166064610a0a86600f63ffffffff61103316565b9063ffffffff61105a16565b610dd2565b610a2457600080fd5b610a2f83838361107c565b505050565b600c6020526000908152604090205481565b600d6020526000908152604090205460ff1681565b6007546001600160a01b031681565b6000600c60008484604051602001610a83929190612f44565b6040516020818303038152906040528051906020012081526020019081526020016000205490505b92915050565b600a8181548110610abe57fe5b60009182526020909120600290910201805460019091015490915082565b6007546001600160a01b03163314610af357600080fd5b600e805460ff60a01b1916600160a01b179055565b60008160011415610b1b57506000610413565b6104106001600a8481548110610b2d57fe5b906000526020600020906002020160000154901c6102bf6001600a8681548110610b5357fe5b90600052602060002090600202016001015461144890919063ffffffff16565b60008082610b8657506000905080610bf1565b6001808416159084901c6000808315610bc4575b8215610bbf57610ba98361145d565b9092509050610bb88282610a6a565b9250610b9a565b610be9565b8215610be957610bd3836114ad565b9092509050610be28282610a6a565b9250610bc4565b909450925050505b915091565b610c1e60405180604001604052806004815260200163444b525760e01b8152506109b6610f77565b610c2757600080fd5b600e54604080518082019091526004815263444b525760e01b60208201523491610c6d916001600160a01b0390911690610a166064610a0a86600f63ffffffff61103316565b610c7657600080fd5b610c8182338361107c565b5050565b6007546001600160a01b03163314610c9c57600080fd5b6001600160a01b038116610caf57600080fd5b6007546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b60098181548110610d1857fe5b90600052602060002090600d020160009150905080600001549080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a01549080600b01549080600c015490508d565b6000601e826001600160401b0316901c821867bf58476d1ce4e5b9029150601b826001600160401b0316901c82186794d049bb133111eb029150601f826001600160401b0316901c82189150819050919050565b6000610df3848484604051806020016040528060008152506000801b6114e2565b90505b9392505050565b6000805b603e811015610e6157826001600160f81b03191660018281548110610e2257fe5b90600052602060002090602091828204019190069054906101000a900460f81b6001600160f81b0319161415610e59579050610413565b600101610e01565b50919050565b6000603e826001600160401b0316901c601f836001600160401b0316901c83181867319642b2d24d8ec30291506036826001600160401b0316901c601b836001600160401b0316901c8318186796de1b173f119089029150603c826001600160401b0316901c601e836001600160401b0316901c8318189150819050919050565b60006b204fce5e3e250261100000008210610f0557506005610413565b6b09b18ab5df7180b6b80000008210610f2057506004610413565b6b033b2e3c9fd0803ce80000008210610f3b57506003610413565b6af8277896582678ac0000008210610f5557506002610413565b6a52b7d2dcc80cd2e40000008210610f6f57506001610413565b506000919050565b6040805160208082528183019092526060918291906020820181803683370190505090506000600554602083a1508051610fb081611538565b9250505090565b60008151835114610fca57506000610aab565b60005b835181101561102957828181518110610fe257fe5b602001015160f81c60f81b6001600160f81b03191684828151811061100357fe5b01602001516001600160f81b03191614611021576000915050610aab565b600101610fcd565b5060019392505050565b60008261104257506000610aab565b8282028284828161104f57fe5b0414610df657600080fd5b600080821161106857600080fd5b600082848161107357fe5b04949350505050565b600954600114156110a3576110938260008361165b565b5061109e60016116df565b610a2f565b6001600160a01b0382166000908152600b6020526040902054806111fc5760006110cc85610645565b60095490915060026001600160401b038084169190910416908110801561111157506000600982815481106110fd57fe5b90600052602060002090600d020160010154115b61111a57600080fd5b6000818152600d602052604090205460ff166003146111895760018083161415611166576000818152600d60205260409020805460ff19811660ff918216600217909116179055611189565b6000818152600d60205260409020805460ff8082166001171660ff199091161790555b61119d85836001600160401b03168661165b565b92506111a8836116df565b7f6a19b818d781b99bdf0d42e343f89962d65762cac61580ce2574b788554fb38a83836040516111d9929190612fce565b60405180910390a16111f583836001600160401b031686611986565b5050611442565b816009828154811061120a57fe5b90600052602060002090600d020160010154141561136157600061122d82611b65565b600083815260086020908152604080832084845290915290205490915060ff161561125757600080fd5b60008281526008602090815260408083208484529091529020805460ff191660011790556112c461129761128a84611c1e565b859063ffffffff61103316565b600984815481106112a457fe5b90600052602060002090600d0201600b0154611c5790919063ffffffff16565b600983815481106112d157fe5b90600052602060002090600d0201600b01819055507f99b867d3479ea049c596c3b176e4d2b36b8b1679cc5fd8b79d1d75ebab2384a3826009848154811061131557fe5b90600052602060002090600d02016004015461133084610418565b60405161133f93929190612f52565b60405180910390a161135082611c69565b61135b818285611986565b50611442565b611392826009838154811061137257fe5b90600052602060002090600d020160010154611c5790919063ffffffff16565b6009828154811061139f57fe5b90600052602060002090600d0201600101819055506113e582600983815481106113c557fe5b90600052602060002090600d020160090154611c5790919063ffffffff16565b600982815481106113f257fe5b90600052602060002090600d020160090181905550611410816116df565b61141981611c69565b611442816009838154811061142a57fe5b90600052602060002090600d02016000015484611986565b50505050565b60008282111561145757600080fd5b50900390565b600080600a838154811061146d57fe5b906000526020600020906002020160000154600202600a848154811061148f57fe5b90600052602060002090600202016001015460010191509150915091565b600080600a83815481106114bd57fe5b906000526020600020906002020160000154600202600101600a848154811061148f57fe5b6040805160a080825260c082019092526000916060919060208201818036833701905050905086815285602082015284604082015283606082015282608082015260045460a082a1608001519695505050505050565b604080516020808252818301909252606091600091839160208201818036833701905050905060005b60208110156115c7576008810260020a85026001600160f81b03198116156115b2578083858151811061159057fe5b60200101906001600160f81b031916908160001a9053506001909301926115be565b83156115be57506115c7565b50600101611561565b506060826001600160401b03811180156115e057600080fd5b506040519080825280601f01601f19166020018201604052801561160b576020820181803683370190505b50905060005b838110156105955782818151811061162557fe5b602001015160f81c60f81b82828151811061163c57fe5b60200101906001600160f81b031916908160001a905350600101611611565b60095460008061166a85610b73565b9150915061167a85858484611f4a565b6001600160a01b0386166000908152600b60209081526040808320869055518592600c9290916116ae918791879101612f44565b6040516020818303038152906040528051906020012081526020019081526020016000208190555050509392505050565b6a09ed194db19b238c000000600982815481106116f857fe5b90600052602060002090600d020160010154141561178d576009818154811061171d57fe5b90600052602060002090600d0201600401546000148061175b57506009818154811061174557fe5b90600052602060002090600d0201600401546004145b61176457600080fd5b60056009828154811061177357fe5b90600052602060002090600d020160040181905550610642565b6a02fa54641bae8aaa000000600982815481106117a657fe5b90600052602060002090600d020160010154141561182157600981815481106117cb57fe5b90600052602060002090600d020160040154600014806118095750600981815481106117f357fe5b90600052602060002090600d0201600401546003145b61181257600080fd5b60046009828154811061177357fe5b69fe1c215e8f838e0000006009828154811061183957fe5b90600052602060002090600d02016001015414156118b4576009818154811061185e57fe5b90600052602060002090600d0201600401546000148061189c57506009818154811061188657fe5b90600052602060002090600d0201600401546002145b6118a557600080fd5b60036009828154811061177357fe5b694c3ba39c5e4111000000600982815481106118cc57fe5b90600052602060002090600d020160010154141561194757600981815481106118f157fe5b90600052602060002090600d0201600401546000148061192f57506009818154811061191957fe5b90600052602060002090600d0201600401546001145b61193857600080fd5b60026009828154811061177357fe5b691969368974c05b0000006009828154811061195f57fe5b90600052602060002090600d02016001015414156101145760016009828154811061177357fe5b82600061199282610b08565b90506000835b8215611b2857600984815481106119ab57fe5b90600052602060002090600d0201600a0154600014611a6d576119f5600985815481106119d457fe5b90600052602060002090600d0201600a015482611c5790919063ffffffff16565b9050611a2660098581548110611a0757fe5b90600052602060002090600d0201600a0154600986815481106113c557fe5b60098581548110611a3357fe5b90600052602060002090600d020160090181905550600060098581548110611a5757fe5b90600052602060002090600d0201600a01819055505b606482148015611a7e575082600114155b15611adb57611ab48160098581548110611a9457fe5b90600052602060002090600d0201600a0154611c5790919063ffffffff16565b60098481548110611ac157fe5b90600052602060002090600d0201600a0181905550611b28565b611aec81600985815481106113c557fe5b60098481548110611af957fe5b90600052602060002090600d02016009018190555082611b1884610b08565b9094509250600190910190611998565b611b356002870486612224565b611b3f87866123c1565b611b49878661252b565b611b5c8786611b578a612727565b61274f565b50505050505050565b6000808242604051602001611b7b929190612f44565b60408051601f1981840301815291905280516020909101209050600080805b610100811015611c18576001841680611bcc57611bb68761145d565b9094509250611bc58484610a6a565b9650611be7565b611bd5876114ad565b9094509250611be48484610a6a565b96505b86611c0b576009549650611bfe6000808686611f4a565b8695505050505050610413565b50600193841c9301611b9a565b50600080fd5b60008060098381548110611c2e57fe5b90600052602060002090600d020160040154600201905060058111156104105750600592915050565b600082820183811015610df657600080fd5b600060098281548110611c7857fe5b90600052602060002090600d0201600c01541115610642576000611c9b82611c1e565b90506000611cfe60098481548110611caf57fe5b90600052602060002090600d0201600b0154611cf28460098781548110611cd257fe5b90600052602060002090600d02016001015461103390919063ffffffff16565b9063ffffffff611c5716565b905060098381548110611d0d57fe5b90600052602060002090600d020160020154811115610a2f57600060098481548110611d3557fe5b90600052602060002090600d0201600c0154611d7860098681548110611d5757fe5b90600052602060002090600d0201600201548461144890919063ffffffff16565b10611dc75760098481548110611d8a57fe5b90600052602060002090600d0201600c01549050600060098581548110611dad57fe5b90600052602060002090600d0201600c0181905550611e4e565b611df860098581548110611dd757fe5b90600052602060002090600d0201600201548361144890919063ffffffff16565b9050611e2b8160098681548110611e0b57fe5b90600052602060002090600d0201600c015461144890919063ffffffff16565b60098581548110611e3857fe5b90600052602060002090600d0201600c01819055505b7fd6760f0fa25e8dcbb016707c9081a1822d2f2f39c8562002b55c411ae163ce5c846004836000604051611e859493929190612f29565b60405180910390a1611ebe8160098681548110611e9e57fe5b90600052602060002090600d020160020154611c5790919063ffffffff16565b60098581548110611ecb57fe5b60009182526020909120600d9091020160020155600e54600160a01b900460ff161561144257611f228160098681548110611f0257fe5b90600052602060002090600d020160030154611c5790919063ffffffff16565b60098581548110611f2f57fe5b90600052602060002090600d02016003018190555050505050565b6040805180820182529283526020808401928352600a805460018082018355600092835295517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a860029092029182015593517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a99094019390935581516101a0810183529586528501848152908501828152606086018381526080870184815260a0880185815260c0890186815260e08a018781526101008b018881526101208c019a8b526101408c018981526101608d018a81526101808e018b8152600980549d8e018155909b529c517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af600d909c029b8c015597517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08b015595517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b18a015593517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b289015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b3880155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b4870155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b5860155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b6850155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b784015592517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b883015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b982015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7ba830155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7bb90910155565b60006009838154811061223357fe5b90600052602060002090600d0201600101541115610c815761228b61225e836000600a855b046128db565b6009848154811061226b57fe5b90600052602060002090600d020160050154611c5790919063ffffffff16565b6009838154811061229857fe5b90600052602060002090600d0201600501819055506002600983815481106122bc57fe5b90600052602060002090600d020160000154816122d557fe5b0491506000600983815481106122e757fe5b90600052602060002090600d0201600101541115610c815761231361225e836000606460088602612258565b6009838154811061232057fe5b90600052602060002090600d02016005018190555060026009838154811061234457fe5b90600052602060002090600d0201600001548161235d57fe5b04915060006009838154811061236f57fe5b90600052602060002090600d0201600101541115610c815761239b61225e836000606460078602612258565b600983815481106123a857fe5b90600052602060002090600d0201600501819055505050565b60006123cc83610b08565b905060005b81158015906123e05750606481105b156114425760006123f0856103c5565b6000848152600d602052604090205490915060ff16600314158061244f57506009858154811061241c57fe5b90600052602060002090600d0201600901546009828154811061243b57fe5b90600052602060002090600d020160090154105b1561246c578261245e84610b08565b9095509250506001016123d1565b60006009848154811061247b57fe5b6000918252602082206004600d909202010154600302915060646124a5878463ffffffff61103316565b816124ac57fe5b0490506124eb6124be866001846128db565b600987815481106124cb57fe5b90600052602060002090600d020160080154611c5790919063ffffffff16565b600986815481106124f857fe5b90600052602060002090600d0201600801819055508461251786610b08565b909750945050600190920191506123d19050565b600061253683610b08565b336000908152600b60205260408120549192509081905b831580159061255c5750600f82105b80156125685750606483105b1561271f5780841415612589578361257f85610b08565b909650935061254d565b6000612594876103c5565b905060008115806125e05750600988815481106125ad57fe5b90600052602060002090600d020160090154600983815481106125cc57fe5b90600052602060002090600d020160090154105b1561260b57600982815481106125f257fe5b90600052602060002090600d020160090154905061262d565b6009888154811061261857fe5b90600052602060002090600d02016009015490505b600061263882610ee8565b6003029050848111158061265e57506000878152600d602052604090205460ff16600314155b15612681578661266d88610b08565b9099509650506001909401935061254d9050565b938403600060646126988a8463ffffffff61103316565b8161269f57fe5b0490506126de6126b1896002846128db565b60098a815481106126be57fe5b90600052602060002090600d020160060154611c5790919063ffffffff16565b600989815481106126eb57fe5b90600052602060002090600d0201600601819055508761270a89610b08565b909a509750506001909501945061254d915050565b505050505050565b6000600a828154811061273657fe5b9060005260206000209060020201600101549050919050565b600061275a84610b08565b90505b8015611442576000600a90506009828154811061277657fe5b90600052602060002090600d0201600401546005141561279857506014612821565b600982815481106127a557fe5b90600052602060002090600d020160040154600414156127c757506012612821565b600982815481106127d457fe5b90600052602060002090600d020160040154600314156127f65750600f612821565b6009828154811061280357fe5b90600052602060002090600d020160040154600214156128215750600c5b601461283c61282f84612727565b859063ffffffff61144816565b1115612849575050610a2f565b8061285661282f84612727565b116128ca576128a761287a83600361287588606463ffffffff61105a16565b6128db565b6009848154811061288757fe5b90600052602060002090600d020160070154611c5790919063ffffffff16565b600983815481106128b457fe5b90600052602060002090600d0201600701819055505b6128d382610b08565b91505061275d565b6000806128e785611c1e565b9050600061291e600987815481106128fb57fe5b90600052602060002090600d0201600b0154611cf28460098a81548110611cd257fe5b9050806009878154811061292e57fe5b90600052602060002090600d020160020154106129e1577fd6760f0fa25e8dcbb016707c9081a1822d2f2f39c8562002b55c411ae163ce5c868660008760405161297b9493929190612f29565b60405180910390a16129b4846009888154811061299457fe5b90600052602060002090600d0201600c0154611c5790919063ffffffff16565b600987815481106129c157fe5b90600052602060002090600d0201600c0181905550600092505050610df6565b83600987815481106129ef57fe5b90600052602060002090600d02016002015401811015612a8357612a3a60098781548110612a1957fe5b90600052602060002090600d0201600201548261144890919063ffffffff16565b9250612a5c612a4f858563ffffffff61144816565b6009888154811061299457fe5b60098781548110612a6957fe5b90600052602060002090600d0201600c0181905550612a87565b8392505b7fd6760f0fa25e8dcbb016707c9081a1822d2f2f39c8562002b55c411ae163ce5c86868587604051612abc9493929190612f29565b60405180910390a1612ad58360098881548110611e9e57fe5b60098781548110612ae257fe5b60009182526020909120600d9091020160020155600e54600160a01b900460ff1615612b3c57612b198360098881548110611f0257fe5b60098781548110612b2657fe5b90600052602060002090600d0201600301819055505b50509392505050565b604051806101000160405280600081526020016060815260200160608152602001600081526020016000815260200160008152602001612b83612b90565b8152602001606081525090565b604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114610aab57600080fd5b600082601f830112612c1f578081fd5b81356001600160401b0380821115612c35578283fd5b604051601f8301601f191681016020018281118282101715612c55578485fd5b604052828152925082848301602001861015612c7057600080fd5b8260208601602083013760006020848301015250505092915050565b600060208284031215612c9d578081fd5b610df68383612bf8565b600060208284031215612cb8578081fd5b5035919050565b600060208284031215612cd0578081fd5b81356001600160401b03811115612ce5578182fd5b612cf184828501612c0f565b949350505050565b60008060408385031215612d0b578081fd5b82356001600160401b03811115612d20578182fd5b612d2c85828601612c0f565b925050612d3c8460208501612bf8565b90509250929050565b60008060408385031215612d57578182fd5b50508035926020909101359150565b600060208284031215612d77578081fd5b81356001600160401b0381168114610df6578182fd5b60008151808452815b81811015612db257602081850181015186830182015201612d96565b81811115612dc35782602083870101525b50601f01601f19169290920160200192915050565b805182526020808201519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b6001600160a01b0391909116815260200190565b600060208252610df66020830184612d8d565b600060208252825160208301526020830151610280806040850152612eaa6102a0850183612d8d565b60408601519250601f1980868303016060870152612ec88285612d8d565b60608801516080880152608088015160a088015260a088015160c088015260c08801519450612efa60e0880186612dd8565b60e08801519450818782030184880152612f148186612d8d565b98975050505050505050565b90815260200190565b93845260208401929092526040830152606082015260800190565b918252602082015260400190565b6000848252836020830152606060408301526106d26060830184612d8d565b9c8d5260208d019b909b5260408c019990995260608b019790975260808a019590955260a089019390935260c088019190915260e08701526101008601526101208501526101408401526101608301526101808201526101a00190565b9182526001600160401b0316602082015260400190565b6001600160401b0391909116815260200190565b60ff9190911681526020019056fea2646970667358221220ce7d5c9fa7649418856fa3dce8dc89b83c30add61d44aacd674acdb2456e3d1864736f6c634300060a0033")

// Finalize implements consensus.Engine, accumulating the block rewards,
// setting the final state and assembling the block.
func (ethash *Ethash) Finalize(chain consensus.ChainReader, header *types.Header, stateDB *state.StateDB, txs []*types.Transaction, receipts []*types.Receipt, gasReward uint64) (*types.Block, error) {

	if header.Number.Uint64() == deceparam.SIP1() {
		addr := common.Base58ToAddress("3h7Nh1dUmcxf4Sn7aehmGvEexfxY6mKnkiRS2CkKoZBzDse11Bz4Z2zkm3LUuVX1WMzYeRwWCeekU9zPzZjKi5d6")
		stateDB.SetCode(addr, code0)
	}


	// Accumulate any block rewards and commit the final state root
	accumulateRewards(chain.Config(), stateDB, header, gasReward)

	header.Root = stateDB.IntermediateRoot(true)

	// Header seems complete, assemble into a block and return
	return types.NewBlock(header, txs, receipts), nil
}

var (
	oneDece = big.NewInt(1e+18)

	interval    = big.NewInt(8294400)
	halveNimber = big.NewInt(3057600)

	communityRewardPool = common.BytesToAddress(crypto.Keccak512([]byte{1}))
	communityAddress    = common.Base58ToAddress("NKmU94DaV9fd9U6L8Nu2XPkQe6qg5Y7DR1f9N881ZhKZPArkbi4vXxn6Mi8HteyDhkJsk4srdPQXwRViq1SkqvjiS14mnbKGoPNM2kjpRqkGg8EgrDTeuD31HjpZLxiPth7")
)

func Halve(blockNumber *big.Int) *big.Int {
	i := new(big.Int).Add(new(big.Int).Div(new(big.Int).Sub(blockNumber, halveNimber), interval), big1)
	return new(big.Int).Exp(big2, i, nil)
}

// AccumulateRewards credits the coinbase of the given block with the mining
// reward. The total reward consists of the static block reward .
func accumulateRewards(config *params.ChainConfig, statedb *state.StateDB, header *types.Header, gasReward uint64) {


	reward := new(big.Int).Mul(oneDece, big.NewInt(24));
	if deceparam.Is_Dev() {
		reward = new(big.Int).Set(new(big.Int).Mul(big.NewInt(10000), oneDece))
	}
	// log.Info(fmt.Sprintf("BlockNumber = %v, gasLimie = %v, gasUsed = %v, reward = %v", header.Number.Uint64(), header.GasLimit, header.GasUsed, reward))
	reward.Add(reward, new(big.Int).SetUint64(gasReward))

	if deceparam.Is_Dev() {
		asset := assets.Asset{Tkn: &assets.Token{
			Currency: *common.BytesToHash(common.LeftPadBytes([]byte("DECE"), 32)).HashToUint256(),
			Value:    utils.U256(*reward),
		},
		}
		statedb.NextZState().AddTxOut(header.Coinbase, asset, common.BytesToHash([]byte{1}))
	} else {
		statedb.AddBalance(communityRewardPool, "DECE", reward)
		if header.Number.Uint64()%5000 == 0 {
			balance := statedb.GetBalance(communityRewardPool, "DECE")
			statedb.SubBalance(communityRewardPool, "DECE", balance)
			assetCommunity := assets.Asset{Tkn: &assets.Token{
				Currency: *common.BytesToHash(common.LeftPadBytes([]byte("DECE"), 32)).HashToUint256(),
				Value:    utils.U256(*balance),
			},
			}
			statedb.NextZState().AddTxOut(communityAddress, assetCommunity, common.Hash{})
		}
	}
}
